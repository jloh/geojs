# HipChat!
location = /v1/hooks/hipchat/install {
    default_type application/json;
    content_by_lua_block {
        local cjson = require("cjson")
        local json_encode = cjson.encode

        local payload = {
            name        = "GeoJS IP Lookup",
            description = "Lookup IP Geographic information",
            key         = "com.jloh.geojs",
            links = {
                homepage = "https://geojs.io",
                self     = "https://geojs.io/docs/chatops/"
            },
            vendor = {
                name = "James Loh",
                url  = "https://jloh.co/"
            },
            capabilities = {
                hipchatApiConsumer = {
                    scopes   = {"send_notification"},
                    fromName = "IP Information",
                    avatar = {
                        url        = "https://static.jloh.co/geojs/avatar/hipchat/v1/geojs-icon_1x.png",
                        ["url@2x"] = "https://static.jloh.co/geojs/avatar/hipchat/v1/geojs-icon_2x.png"
                    }
                },
                webhook = {{
                    url     = "https://get.geojs.io/v1/hooks/hipchat",
                    pattern = "^/[gG][eE][oO][jJ][sS]",
                    event   = "room_message",
                    name    = "GeoJS"
                }}
            }
        }

        ngx.say(json_encode(payload))
    }
}

location = /v1/hooks/hipchat {
    default_type application/json;
    content_by_lua_block {
        -- Get our request body
        local get, post, files = require "resty.reqargs"()

        local split        = require("geojs.utils").split
        local geo_lookup   = require("geojs.utils").geo_lookup
        local getptr       = require("geojs.utils").get_ptr
        local trim         = require("geojs.utils").trim
        local validate_ip  = require("geojs.utils").validate_ip
        local cjson        = require("cjson")
        local json_encode  = cjson.encode
        local json_decode  = cjson.decode

        -- Get the message from HipChat
        local message = post["item"]["message"]["message"]
        -- Get our IP we're wanting to look at
        -- HipChat gives us the full message with the slash command
        -- Just remove everything before the space
        local req_ip  = string.gsub(message, "/.*%s", "")
        -- Trim whitespace we might have
        req_ip = trim(req_ip)

        -- Validate our IP
        if not validate_ip(req_ip) then
            local resp = string.format("Hmmm. Looks like you've given us a bad IP (<code>%s</code>). This command only accepts IPs (IPv6 or IPv4) for now, sorry!", ngx.escape_uri(req_ip))
            ngx.say(json_encode({
                message        = resp,
                notify         = "False",
                color          = "red",
                message_format = "html",
            }))
            ngx.exit(ngx.OK)
        end

        -- Get our data with the requested IP
        local req_data = geo_lookup(req_ip)
        local req_ptr  = getptr(req_ip)

        -- Just in case we can't find out country
        if req_data['country'] == nil then
            req_data['country'] = "unknown country"
        end

        -- Define some card vars
        local card_title      = string.format("<strong>%s</strong> is a %s IP belonging to %s", req_ip, req_data['country'], req_data['organization_name'])
        local txt_message     = string.format("Results for <b>%s</b><br><br>", req_ip)
        local card_simp_title = string.format("GeoIP results for %s", req_ip)
        local card_body  = ""
        local card_icons = {}

        -- Only some items end up in vars since it has a dumb limit of 3 lines?
        if req_ptr then
            card_body   = card_body .. '<strong>PTR:</strong> ' .. req_ptr
            txt_message = txt_message .. 'PTR: ' .. req_ptr
        end
        if req_data['country'] then
            txt_message = txt_message .. '<br>Country: ' .. req_data['country']
            card_icons  = {
                url        = string.lower(string.format("https://static.jloh.co/geojs/flags/v1/%s.png", req_data['country_code'])),
                ["url@2x"] = string.lower(string.format("https://static.jloh.co/geojs/flags/v1/2x/%s.png", req_data['country_code']))
            }
        end
        if req_data['region'] then
            card_body   = card_body .. '\n<strong>Region:</strong> ' .. req_data['region']
            txt_message = txt_message .. '<br>Region: ' .. req_data['region']
        end
        if req_data['city'] then
            card_body   = card_body .. '\n<strong>City:</strong> ' .. req_data['city']
            txt_message = txt_message .. '<br>City: ' .. req_data['city']
        end
        if req_data['organization_name'] then
            txt_message = txt_message .. '<br>Organization: ' .. req_data['organization_name']
        end
        txt_message = txt_message .. '<br><br>Powered by <a href="https://geojs.io" title="GeoJS">GeoJS</a>'

        local card_message = {
            style  = "application",
            format = "medium",
            title  = card_simp_title,
            id     = post["item"]["message"]["id"],
            activity = {
                html = card_title
            },
            description = {
                format = "html",
                value  = card_body
            },
            attributes = {{
                label = "Powered by",
                value = {
                    label = "GeoJS",
                    url   = "https://geojs.io"
                }
            }},
            icon = card_icons
        }

        ngx.say(json_encode({
            message        = txt_message,
            card           = card_message,
            notify         = "False",
            message_format = "html",
        }))
    }
}

# Slack!
location = /v1/hooks/slack {
    default_type application/json;
    content_by_lua_block {
        -- Setup local vars
        local cjson        = require "cjson"
        local split        = require("geojs.utils").split
        local geo_lookup   = require("geojs.utils").geo_lookup
        local getptr       = require("geojs.utils").get_ptr
        local trim         = require("geojs.utils").trim
        local validate_ip  = require("geojs.utils").validate_ip
        local cjson        = require("cjson")
        local json_encode  = cjson.encode
        local json_decode  = cjson.decode
        local reqpath      = '/v1/ip/geo.json'
        local ngx_var      = ngx.var

        local slack_token = ngx_var.geojs_slack_token
        local message
        local slack_response_type

        -- Get our request body
        local get, post, files = require "resty.reqargs"()

        -- Verify our payload
        if post["token"] ~= slack_token then
            ngx.status = 403
            ngx.say(json_encode({
                error = "Verify token does not match expected value"
            }))
            ngx.exit(ngx.OK)
        end

        -- Get our slack request
        local slack_req = post['text']

        -- If people are just asking for help just reply with that
        if slack_req == "help" then
            local resp_text = "Having some trouble? The GeoJS slack app can be used like so `/geojs 8.8.8.8`. Give it a try!\nIf you continue to have trouble reach out to us at contact@geojs.io"
            local message = {
                text = resp_text
            }
            ngx.say(json_encode(message))
        else

            -- Get our IP address
            -- Slack gives it to us in a nice arg without the slash command
            local req_text = post['text']

            -- Check if we've got display set
            if string.match(req_text, "display") ~= nil then
                slack_response_type = "in_channel"
                req_ip = string.gsub(req_text, " display", "")
                -- Trim any extra whitespace we might have
                req_ip = trim(req_ip)
            else
                slack_response_type = "ephemeral"
                req_ip = req_text
            end

            if not validate_ip(req_ip) then
                local resp = string.format("Hmmm. Looks like you've given us a bad IP (`%s`). This command only accepts IPs (IPv6 or IPv4) for now, sorry!", ngx.escape_uri(req_ip))
                local message = {
                    attachments = {{
                        mrkdwn_in = {
                            "text"
                        },
                        color       = "danger",
                        fallback    = "Hmmm. Looks like you've given us a bad IP. This command only accepts IPs (IPv6 or IPv4) for now, sorry!",
                        text        = resp
                    }}
                }
                ngx.say(json_encode(message))
                ngx.exit(ngx.OK)
            end

            -- Get our response URL that we use if we're taking to long
            local response_url = post['response_url']

            -- Get Geo data about this IP
            local req_data = geo_lookup(req_ip)
            local req_ptr  = getptr(req_ip)

            local resp = ''
            -- Build out response
            if req_ptr then
                resp = resp .. 'PTR: `' .. req_ptr .. '`'
            end
            if req_data['country'] then
                resp = resp .. '\nCountry: ' .. req_data['country']
            end
            if req_data['region'] then
                resp = resp .. '\nRegion: ' .. req_data['region']
            end
            if req_data['city'] then
                resp = resp .. '\nCity: ' .. req_data['city']
            end
            if req_data['organization'] then
                resp = resp .. '\nOrganization: ' .. req_data['organization_name']
            end
            local title = "IP Information for " .. req_ip
            message = {
                response_type = slack_response_type,
                attachments = {{
                    mrkdwn_in = {
                        "text"
                    },
                    fallback    = "", -- TODO: Actually put something here good lord
                    title       = title,
                    text        = resp,
                    footer      = "Powered by <https://geojs.io|GeoJS>",
                    footer_icon = "https://static.jloh.co/geojs/avatar/hipchat/v1/geojs-icon_2x.png"
                }}
            }
            -- If we've taken longer than 3 seconds we have to send a POST request
            -- with the URL Slack gives us
            local request_time = ngx.now() - ngx.req.start_time()
            -- If we're right on 3 seconds or over send a POST
            if request_time > 2.9 then
                -- Reply to slack via POST
                local http = require "resty.http"
                local httpc = http.new()
                local res, err = httpc:request_uri(response_url, {
                    method  = "POST",
                    body    = json_encode(message),
                    headers = {
                        ["Content-Type"] = "application/json",
                    }
                })
                if not res then
                    ngx.log(ngx.ERR, "failed responding to slack webhook: ", err)
                    return
                end
            else
                -- Just respond with all our datas
                ngx.say(json_encode(message))
            end
        end
    }
}

location = /v1/hooks/slack/install {
    content_by_lua_block {
        -- Set our vars
        local ngx_redirect = ngx.redirect
        local ngx_var      = ngx.var
        local http  = require "resty.http"
        local httpc = http.new()

        -- Slack secrets
        local slack_client_id     = ngx_var.geojs_slack_client_id
        local slack_client_secret = ngx_var.geojs_slack_client_secret

        -- Get our request body
        local get, post, files = require "resty.reqargs"()

        -- Construct our URI
        local response_url = "https://slack.com/api/oauth.access"

        -- Add slack code we got
        local response = "code=" .. get["code"]

        -- Add in client ID/Secret
        response = response .. "&client_id="     .. slack_client_id
        response = response .. "&client_secret=" .. slack_client_secret

        -- Try and auth our request
        local res, err = httpc:request_uri(response_url, {
            method = "GET",
            query  = response,
            headers = {
                ["Content-Type"] = "application/x-www-form-urlencoded",
            }
        })
        if not res then
            ngx.say("Hmmm. Something went wrong, but we're looking at it promise!")
            return
        else
            ngx_redirect("https://geojs.io/docs/chatops/slack/")
        end
    }
}

location = /v1/hooks/slack/install_direct {
    content_by_lua_block {
        -- Commands and junk
        local ngx_redirect = ngx.redirect
        local ngx_var      = ngx.var

        -- Set our vars!
        local slack_client_id = ngx_var.geojs_slack_client_id
        local slack_scope     = "commands"
        local slack_domain    = "https://slack.com/oauth/authorize"

        -- Slack redirect
        local redirect = slack_domain .. "?client_id=" .. slack_client_id .. "&scope=" .. slack_scope

        ngx_redirect(redirect)
    }
}

# Twist app!
location = /v1/hooks/twistapp {
    default_type application/json;
    content_by_lua_block {
        -- Setup local vars
        local ngx_var      = ngx.var
        local cjson        = require "cjson"
        local split        = require("geojs.utils").split
        local geo_lookup   = require("geojs.utils").geo_lookup
        local getptr       = require("geojs.utils").get_ptr
        local trim         = require("geojs.utils").trim
        local validate_ip  = require("geojs.utils").validate_ip
        local cjson        = require("cjson")
        local json_encode  = cjson.encode
        local reqpath      = '/v1/ip/geo.json'
        local message

        -- Define our verification token
        local verification_token = ngx_var.geojs_twistapp_token

        -- Get our request body
        local get, post, files = require "resty.reqargs"()

        -- Verify our payload
        if post["verify_token"] ~= verification_token then
            ngx.status = 403
            ngx.say("Verify token does not match expected value")
            ngx.exit(ngx.OK)
        end

        -- If we just recieved a ping event, respond with pong
        -- https://developer.twistapp.com/v2/#payload-when-a-ping-happens
        if post["event_type"] == "ping" then
            message = {
                content = "pong"
            }
        else
            -- Get our IP address
            -- Twist gives it to us in a nice arg without the slash command
            local req_ip = post['command_argument']

            if not validate_ip(req_ip) then
                local resp = string.format("Hmmm. Looks like you've given us a bad IP (`%s`). This command only accepts IPs (IPv6 or IPv4) for now, sorry!", ngx.escape_uri(req_ip))
                local message = {
                    content = resp
                }
                ngx.say(json_encode(message))
                ngx.exit(ngx.OK)
            end

            -- Get Geo data about this IP
            local req_data = geo_lookup(req_ip)
            local req_ptr  = getptr(req_ip)

            -- Build out response
            local resp = '### IP information for **' .. req_ip .. '**'
            if req_ptr then
                resp = resp .. '\nPTR: `' .. req_ptr .. '`'
            end
            if req_data['country'] then
                resp = resp .. '\nCountry: ' .. req_data['country']
            end
            if req_data['region'] then
                resp = resp .. '\nRegion: ' .. req_data['region']
            end
            if req_data['city'] then
                resp = resp .. '\nCity: ' .. req_data['city']
            end
            if req_data['organization'] then
                resp = resp .. '\nOrganization: ' .. req_data['organization_name']
            end
            resp = resp .. '\nPowered by [GeoJS](https://geojs.io)'
            message = {
                content = resp
            }
        end

        -- Respond with all our datas
        ngx.say(json_encode(message))
    }
}

# TODO: actually something with this
location = /v1/hooks/twistapp/installed {
    return 301 https://geojs.io/docs/chatops/;
}
